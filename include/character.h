#ifndef INCLUDE_CHARACTER_H
#define INCLUDE_CHARACTER_H

#include <cstdint>
#include <string>

enum Jobs : uint8_t {
  JOB_BARBARIAN,
  JOB_BARD,
  JOB_CLERIC,
  JOB_DRUID,
  JOB_FIGHTER,
  JOB_MONK,
  JOB_PALADIN,
  JOB_RANGER,
  JOB_ROUGE,
  JOB_SORCERER,
  JOB_WARLOCK,
  JOB_WIZARD,
  JOB_TOTAL
};

enum subJobs : uint8_t { SUBJOB_1, SUBJOB_2, SUBJOB_3, SUBJOB_4 };

enum Species : uint8_t {
  SPECIES_AASIMAR,
  SPECIES_DRAGONBORN,
  SPECIES_DWARF,
  SPECIES_ELF,
  SPECIES_GNOME,
  SPECIES_GOLIATH,
  SPECIES_HALFLING,
  SPECIES_HUMAN,
  SPECIES_ORC,
  SPECIES_TIEFLING,
  SPECIES_TOTAL
};

enum Stats : uint8_t {
  STAT_STR,
  STAT_DEX,
  STAT_CON,
  STAT_INT,
  STAT_WIS,
  STAT_CHA,
  STAT_TOTAL
};

enum Skills : uint8_t {
  SKILL_ACROBATICS,
  SKILL_ANIMAL_HANDLING,
  SKILL_ARCANA,
  SKILL_ATLHETICS,
  SKILL_DECEPTION,
  SKILL_HISTORY,
  SKILL_INSIGHT,
  SKILL_INTIMIDATION,
  SKILL_INVESTIGATION,
  SKILL_MEDICINE,
  SKILL_NATURE,
  SKILL_PERCEPTION,
  SKILL_PERFOMANCE,
  SKILL_PERSUASION,
  SKILL_RELIGION,
  SKILL_SLEIGHT_OF_HAND,
  SKILL_STEALTH,
  SKILL_SURVIVAL,
  SKILL_TOTAL
};

class Character {
public:
  unsigned int exp;
  std::string name;
  unsigned int stats[STAT_TOTAL];
  bool skills[SKILL_TOTAL];
  unsigned int jobs[JOB_TOTAL];
  enum subJobs subjobs[JOB_TOTAL];
  enum Species species;

private:
};

#endif
